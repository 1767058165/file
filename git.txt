创建一个Git仓库，使用mkdir path和cd path 
初始化一个Git仓库，使用git init命令。
添加文件到Git仓库，分两步：
· 第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
· 第二步，使用命令git commit，完成。
重新进入已打开的Git仓库，使用$ cd path
************************************************************
命令git rm用于删除一个文件。
现在，你又理解了Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。
用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
git status命令可以让我们时刻掌握仓库当前的状态
*************************************
小结

要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
*******************************************************************
把文件往Git版本库里添加的时候，是分两步执行的：

第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。

因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。

你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
***************************************************************************
$ ：
pwd显示当前目录
git commit命令，-m后面输入的是本次提交的说明

退出冒号命令：按q键，enter键
分支改变，工作区文件内容也随之改变。

vim 文件名：修改文件

**********************************************************
如果想对某个开源项目出一份力，可以先把该项目的 Git 仓库复制一份出来，这就需要用到 git clone 命令；
版本回退：$ git reset --hard HEAD^，在Git中，用HEAD表示当前版本，也就是最新的提交，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100

版本向前：$ git reset --hard commit ID
版本号一般7位即可

在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令

git log命令显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是append GPL，上一次是add distributed，最早的一次是wrote a readme file。
如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：

$ git log --pretty=oneline
************************************************************
Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
****************************************************
git clone命令，通常是从远程主机克隆一个版本库。
git fetch取回所有分支（branch）的更新
git remote命令列出所有远程主机。

git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并，命令其实相当于git fetch 和 git merge。
git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。
git remote命令列出所有远程主机
git remote show命令加上主机名，可以查看该主机的详细信息

注意，分支推送顺序的写法是<来源地>:<目的地>，所以git pull是<远程分支>:<本地分支>，而git push是<本地分支>:<远程分支>；如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。
****************************************************************
如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用--force选项。

通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。

如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

请注意--no-ff参数，表示禁用Fast forward：

$ git merge --no-ff -m "merge with no-ff" dev

添加远端repo：
$ git remote add upstream git://github.com/pjhyett/github-services.git
$ git push --force origin 
*****************************************************
小结

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

用git log --graph命令可以看到分支合并图。

HEAD指向的就是当前分支
**********************************************
敲命令git tag <name>就可以打一个新标签：

$ git tag v1.0
可以用命令git tag查看所有标签：
*******************************************
vim命令：
退出命令

:wq 保存并退出

ZZ 保存并退出

:q! 强制退出并忽略所有更改

:e! 放弃所有修改，并打开原来文件。
***************************************
git stash使用:
保存
使用git stash保存当前的操作，如果不这么做，你在切换到别的分支之前就一定要提交已经有的改动。但你当前的操作尚未完成，所以要暂时保存起来。

查看
直接使用git stash list就可以了。

MyPC:project limi$ git stash list
stash@{0}: WIP on master: 3d72f0b clear file
stash@{1}: WIP on start-test: fabaa87 fix bug
恢复
用git stash pop stash@{num}，num 是你要恢复的操作的序号，所以你最好在回复前用git stash list查看一下。

git stash pop命令是恢复stash队列中的stash@{0}，然后从记录就删除，就是常规的pop操作。

删除
stash存的不要过多，不然你也不知道哪个是哪个，最好随时清一清。
把所有的记录都清空掉用git stash clear。
