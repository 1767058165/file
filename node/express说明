express.static 是 Express 内置的唯一一个中间件。是基于 serve-static 开发的，负责托管 Express 应用内的静态资源。

app.locals对象是一个javascript对象，它的属性就是程序本地的变量。
app.locals.title
// => 'My App'
app.locals.email
// => 'me@myapp.com'
一旦设定，app.locals的各属性值将贯穿程序的整个生命周期，与其相反的是 res.locals ，它只在这次请求的生命周期中有效。

***********************
app.use()注册express内部函数

app.all()它要求所有从这个点开始的路由需要认证和自动加载一个用户。
******************
app.set('title', 'My Site');
app.get('title');
// => 'My Site'
***********
next('router')来绕过剩余的路由回调。


app.set('foo', ture)等价于调用app.enable('foo')。同样的，调用app.set('foo', false)等价于调用app.disable('foo')。

app.use([path,], function [, function...]) 挂载中间件方法到路径上。如果路径未指定，那么默认为"/"。

由于router和app实现了中间件接口，你可以像使用其他任一中间件方法那样使用它们。

req.body
在请求的body中保存的是提交的一对对键值数据。默认情况下，它是undefined，当你使用比如body-parser和multer这类解析body数据的中间件时，它是填充的。


req.cookies
当使用cookie-parser中间件的时候，这个属性是一个对象，其包含了请求发送过来的cookies。如果请求没有带cookies，那么其值为{}。

req.params
一个对象，其包含了一系列的属性，这些属性和在路由中命名的参数名是一一对应的。例如，如果你有/user/:name路由，name属性可作为req.params.name。这个对象默认值为{}。

req.query
一个对象，为每一个路由中的query string参数都分配一个属性。如果没有query string，它就是一个空对象，{}。

res.app 这个属性持有express程序实例的一个引用，其可以在中间件中使用。

res.download(path, [,filename], [,fn])
传输path指定文件作为一个附件。通常，浏览器提示用户下载。

res.cookie(name, value [,options])
设置name和value的cookie，value参数可以是一串字符或者是转化为json字符串的对象。

res.clearCookie(name [,options])
根据指定的name清除对应的cookie。
******************************************
通过 Express 内置的 express.static 可以方便地托管静态文件，例如图片、CSS、JavaScript 文件等。

将静态资源文件所在的目录作为参数传递给 express.static 中间件就可以提供静态资源文件的访问了。例如，假设在 public 目录放置了图片、CSS 和 JavaScript 文件，你就可以：

app.use(express.static('public'));
现在，public 目录下面的文件就可以访问了。

http://localhost:3000/images/kitten.jpg
http://localhost:3000/css/style.css
http://localhost:3000/js/app.js
http://localhost:3000/images/bg.png
http://localhost:3000/hello.html
****************
app.get(path, callback [, callback ...])
路由HTTP GET请求到有特殊回调的特殊路径。获取更多的信息，可以查阅routing guide。 你可以提供多个回调函数，它们的行为和中间件一样，除了这些回调可以通过调用next('router')来绕过剩余的路由回调。你可以使用这个机制来为一个路由设置一些前提条件，如果请求没能满足当前路由的处理条件，那么传递控制到随后的路由。


可使用 app.route() 创建路由路径的链式路由句柄。
***********************************************
可使用 express.Router 类创建模块化、可挂载的路由句柄。Router 实例是一个完整的中间件和路由系统，因此常称其为一个 “mini-app”。

下面的实例程序创建了一个路由模块，并加载了一个中间件，定义了一些路由，并且将它们挂载至应用的路径上。

在 app 目录下创建名为 birds.js 的文件，内容如下：

var express = require('express');
var router = express.Router();

// 该路由使用的中间件
router.use(function timeLog(req, res, next) {
  console.log('Time: ', Date.now());
  next();
});
// 定义网站主页的路由
router.get('/', function(req, res) {
  res.send('Birds home page');
});
// 定义 about 页面的路由
router.get('/about', function(req, res) {
  res.send('About birds');
});

module.exports = router;
然后在应用中加载路由模块：

var birds = require('./birds');
...
app.use('/birds', birds);
应用即可处理发自 /birds 和 /birds/about 的请求，并且调用为该路由指定的 timeLog 中间件。
****************************************************************************************