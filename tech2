gettype（） — 获取变量的类型


【定义$k=[]; 在$k赋值时，注意添加[]，即 $k[]= array_merge($date2,$t2);】

【静态类可用类实例及类名调用】

substr_count

(PHP 4, PHP 5, PHP 7)
substr_count — 计算字串出现的次数

str_pad

(PHP 4 >= 4.0.1, PHP 5, PHP 7)
str_pad — 使用另一个字符串填充字符串为指定长度。

【理解无限极分类--我们来看返回数组格式的函数，一样要使用递归：
function get_array($id=0){ 
    $sql = "select id,title from class where pid= $id"; 
    $result = mysql_query($sql);//查询子类 
    $arr = array(); 
    if($result && mysql_affected_rows()){//如果有子类 
        while($rows=mysql_fetch_assoc($result)){ //循环记录集 
            $rows['list'] = get_array($rows['id']); //调用函数，传入参数，继续查询下级 
            $arr[] = $rows; //组合数组 
        } 
        return $arr; 
    } 
} 】

【foreach (array_expression as $key => $value)
    statement】

【遍历对象，$key如果取消，变量$value直接获取键值---
foreach($class as $key => $value) {
    print "$key => $value\n";
}】

【打印键名与键值一一对应，最好用var_dump(),而不是print_r()】
【a标签href属性提交表单】

【服务器图片多级存储】

【框架环境文件，遵循框架路由规则】

file_exists() 是个原生的 PHP 函数，PHP7包括Sphinx扩展

————————————————————
权限控制需要用户表和权限表


PHP一维数组转化为单个变量相互转换(extract--转换为变量 与 compact-转换为数组)

Sphinx除了支持检索，还支持文档摘要生成。
——————————————————
【defined('BASEPATH') OR exit('No direct script access allowed');里面or为运算符链接defined(）和

exit（）】

【define（）定义常量与defined（）检查常量是否定义】

【php继承父类所有的公有的属性和方法，PHP不会在子类的构造方法中自动的调用父类的构造方法。要执行父

类的构造方法，需要在子类的构造方法中调用 parent::__construct() 。】

————————————————————
获取php版本--phpversion()
——————————
password_hash（ string $password , integer $algo [, array $options ]）

(PHP 5 >= 5.5.0, PHP 7)
password_hash — 创建密码的哈希（hash）

参数

password
用户的密码。

Caution
使用PASSWORD_BCRYPT 做算法，将使 password 参数最长为72个字符，超过会被截断。
algo
一个用来在散列密码时指示算法的密码算法常量。

options
一个包含有选项的关联数组。目前支持两个选项：salt，在散列密码时加的盐（干扰字符串），以及cost，用

来指明算法递归的层数。这两个值的例子可在 crypt() 页面找到。

省略后，将使用随机盐值与默认 cost
————————————————
password_verify

(PHP 5 >= 5.5.0, PHP 7)
password_verify — 验证密码是否和哈希匹配

————————————————————
crypt

(PHP 4, PHP 5, PHP 7)
crypt — 单向字符串散列

说明：string crypt ( string $str [, string $salt ] )

————————————————
hash

(PHP 5 >= 5.1.2, PHP 7, PECL hash >= 1.1)
hash — 生成哈希值 （消息摘要）
——————————————
hash_pbkdf2

(PHP 5 >= 5.5.0, PHP 7)
hash_pbkdf2 — 生成所提供密码的 PBKDF2 密钥导出；输出类似：120fb6cffcf8b32c43e7
————————————————————————
hex2bin() — 转换十六进制字符串为二进制字符串
————————————————
array_column（）

(PHP 5 >= 5.5.0, PHP 7)
array_column — 返回数组中指定的一列，解决：从多维数组中返回单列数组
——————————————————
php进制0x开头16进制，与0开头8进制，出现在常量中，不能出现在字符串中

————————————————
正则表达式一个最重要的特性就是将匹配成功的模式的某部分进行存储供以后使用这一能力。 
对一个正则表达式模式或部分模式两边添加圆括号()可以把这部分表达式存储到一个临时缓冲区中。 

所捕获的每个子匹配都按照在正则表达式模式中从左至右所遇到的内容按顺序存储。 
存储子匹配的缓冲区编号从1开始，连续编号至最大99个子表达式。 
每个缓冲区都可以使用'\n'(或用'$n')访问，其中n为1至99的阿拉伯数字，用来按顺序标识特定缓冲区(子表

达式)。 

————————————————
preg_replace（）中$1,$2,$3用法

(PHP 4, PHP 5, PHP 7)
preg_replace — 执行一个正则表达式的搜索和替换

例如：<?php
$string = 'April 15, 2003';
$pattern = '/(\w+) (\d+), (\d+)/i';
$replacement = '${1}1,$3';
echo preg_replace($pattern, $replacement, $string);
?>


正则表达式的逆向引用指的是($0-99或\\0-99)和子模式以(/()/)开始。

$str = preg_replace($pattern, "\\1", $string); //这里的\\1可以使用\$1或$1，引用第一个子匹配 
————————————————————————————
ini_set('display_errors', 1);设置php.ini显示错误信息，还有error_reporting();

// 关闭所有PHP错误报告
error_reporting(0);

// Report simple running errors
error_reporting(E_ERROR | E_WARNING | E_PARSE);

// 报告所有 PHP 错误
error_reporting(-1);

——————————————————————————————
$ php index.php tools message "John Smith"--$代表命令行模式
——————————————————
php中数据的魔法引用函数 magic_quotes_gpc  或 magic_quotes_runtime 

agic_quotes_gpc  和 magic_quotes_runtime二者的区别：
magic_quotes_gpc
作用范围是：WEB客户服务端；
作用时间：请求开始的时候，例如当脚本运行时。

magic_quotes_runtime
此函数是该函数的别名： set_magic_quotes_runtime() 
作用范围：从文件中读取的数据或执行exec()的结果或是从SQL查询中得到的；
作用时间：每次当脚本访问运行状态中产生的数据。

magic_quotes_gpc的设定值将会影响通过GET、POST 和 COOKIE获得的数据

magic_quotes_runtime的设定值将会影响从文件中读取的数据或从数据库查询得到的数据,php7已弃用
——————————————————————————————
保证数据插入数据时正常 通常会使用 addslashes 这个来处理， 数据读出时多用 stripslashes 来去掉加的反斜杠
——————————————
【自定义时区设置
ini_set('date.timezone', 'Asia/Shanghai');
date_default_timezone_set("Asia/Shanghai");
时区定义在框架首文件首行】

输出日期：date('Y-m-d H:i:s');

PHP 5.5+版本以上的，可以使用PHP自带的opcache开启性能加速（默认是关闭的）。对于PHP 5.5以下版本的，需要使用APC加速，这里不说明，可以自行上网搜索PHP APC加速的方法。

php -v命令行输出版本

一些缓存存储位置，把数据存在内存缓存中，如 memcached或redis，还有php APC

APC只能在php5.4及以下版本使用

password_hash

(PHP 5 >= 5.5.0, PHP 7)
password_hash — 创建密码的哈希（hash）

——————————————
php发送邮件----使用PHP内置的mail()函数

使用mail()函数发送邮件就必须要有一台无需SMTP验证就可以发信的邮件服务器。但现在的SMTP邮件服务器基本上都是需要验证的。
————————————————————
date('Y-m-d H:i:s')
————————————————
命令模式下转到d:盘，不用输入cd
————————
使用pear安装扩展方式;pear install 扩展名，默认安装在php.exe文件夹下

——————————————————————
644、755、777权限相对于Linux系统
——————————
php.ini 全局变量配置register_globals已在 PHP 5.4.0 中移除该选项。
————————————
filter_var（）

(PHP 5 >= 5.2.0, PHP 7)
filter_var — 使用特定的过滤器过滤一个变量

——————————————
获取post数据，还可以使用 php://input 流，形式：file_get_contents('php://input');
——————————————
php://

php:// — 访问各个输入/输出流（I/O streams）

说明

PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。
——————————————

return用法：

例子：配置文件-- config.php:

<?php
return [
  'site' => 123,
  'settings' => 'asd'
];

Reading:

<?php
$config = (require 'config.php');
————————————————————————
$_SERVER['HTTP_HOST']---
当前请求头中 Host: 项的内容，如果存在的话。可以是域名或者IP地址

————————————————
记得使用完session,

使用session_write_close()来保存会话数据并释放文件锁。

最后：session_destroy

(PHP 4, PHP 5, PHP 7)
session_destroy — 销毁一个会话中的全部数据
——————————————
session_id

(PHP 4, PHP 5, PHP 7)
session_id — 获取/设置当前会话 ID，需在之前使用session_start()

除某个session值可以使用PHP的unset函数，删除后就会从全局变量$_SESSION中去除，无法访问。

如果要删除所有的session，可以使用session_destroy函数销毁当前session，session_destroy会删除所有数据，但是session_id仍然存在。

值得注意的是，session_destroy并不会立即的销毁全局变量$_SESSION中的值，只有当下次再访问的时候，$_SESSION才为空，因此如果需要立即销毁$_SESSION，可以使用unset函数。

————————————————————

事实上，每一次SESSION会话都有一个SESSION ID，用来识别不同的会话，保存在浏览器Cookie之中，也就是这个名为PHPSESSID的Cookie（当然，这个名称是可以更改的）。

在调用 session_start() 之后都会向客户端发送新的 cookie， 无论当前的会话 ID 和新指定的会话 ID 是否相同。

php.ini默认session.name设置为PHPSESSID，该值将传递给cookie保存。  
; Name of the session (used as cookie name).
session.name = PHPSESSID   

——————————————
nl2br（） — 在字符串所有新行之前插入 HTML 换行标记

PHP自带ZIP压缩、解压缩类ZipArchiv
————————————
以下2值共同控制MySQL链接超时值：

interactive_timeout：服务器关闭交互式连接前等待活动的秒数。
 wait_timeout:服务器关闭非交互连接之前等待活动的秒数。
————————————
默认windows文件访问路径为\\

../../../不能访问，定义根目录才可访问网站根目录以外文件夹，根目录/../，

var_export() — 输出或返回一个变量的字符串表示,可输出window双路径

单引号、 双引号，反引号（``）

stdclass对象基类
——————————————
linux的绝对路径是指从根目录说起的. 例如 /dev/somedir/..
而相对路径则是从当前目录说起: 即 ./


一般通过$_SERVER['HTTP_HOST']来活得URL中网站的域名或者ip地址。

last_ip	   bigint(20)
status	   tinyint(1)
content	    text

字段索引添加原则--查询用到的字段需要加

时间戳字段用int(11)因为速度快

ceil()进一法取整

time() — 返回当前的 Unix 时间戳

ip2long() — 将一个IPV4的字符串互联网协议转换成int数字格式

sha1()、MD5（）生成散列值

php $_SERVER中的SERVER_NAME 和HTTP_HOST的区别，尽量使用HTTP_HOST

分页类：获取当前网页地址函数--
        public function curPageURL()
        {
            $pageURL = 'http://';
            if ($_SERVER["SERVER_PORT"] != "80")
            {
                $pageURL .= $_SERVER["SERVER_NAME"] . ":" . $_SERVER["SERVER_PORT"] . $_SERVER["REQUEST_URI"];
            }
            else
            {
                $pageURL .= $_SERVER["SERVER_NAME"] . $_SERVER["REQUEST_URI"];
            }
            return $pageURL;
        }
		
——————————————————————————————————————————————
linux权限：
0755->即用户具有读/写/执行权限，组用户和其它用户具有读写权限；
0644->即用户具有读写权限，组用户和其它用户具有只读权限；

一般赋予目录0755权限，文件0644权限。
————————————————————————
pathinfo() 返回一个关联数组包含有 path 的信息。返回关联数组还是字符串取决于 options。
——————————————————————————————
——————————————————————————
Apache服务器index.html默认优先index.php访问

网站根目录下的子目录禁止浏览器URL访问，其下文件可以访问
realpath()-返回规范化的绝对路径
basename() - 返回路径中的文件名部分
dirname() - 返回路径中的目录部分
pathinfo() - 返回文件路径的信息

$_SERVER["REQUEST_URI"]--'REQUEST_URI'， URI 用来指定要访问的页面。例如 “/index.html”。
echo "当前IP".$_SERVER['SERVER_ADDR']."<br>";
echo "地址转换".ip2long($_SERVER['SERVER_ADDR'])."<br>";

对于程序调试最好有正式域名

对于需要控制器的框架不同入口文件，添加.htaccess文件隐藏index.php

日志表可以采用Json字符串的形式记录具体的操作内容，例如：{“查询类型”:“值”, “查询名称”:“值”, “公司”:“值”,……….}

limit 20,10---限制20条记录

对于程序中使用die和exit，有时会影响前端网页输出，后端输出没问题，最好使用return。
ajax只能获取php页面echo数据。

对于登陆成功等提示信息，不一定使用ajax,可以使用session,js中输出php获取session脚本。

【ajax异步获取php数据。 一般php会在后台处理请求，并返回结果给前端。 必须是echo的方式，不然ajax获取不到。
返回的类型包括，字符串，数字，json。 最常用的就是json。 返回后，前端会处理json成对象，然后使用。】

alert()参数使用\n换行，连字符串使用+，php使用点号

js使用JSON.parse()解析json数据;

——————————————————————————————————————
******************************************************
jquery插件函数,最好放在文档就绪ready函数之中

限制同一用户只能登陆一次,可以使用每次生成的session_id保存到数据库

全局模式下，命令行模式下执行文件：php 文件名

图片可base64编码后保存数据库

后台一些布局，不一定使用框架，使用div即可，利用绝对定位。

ｓｅｓｓｉｏｎ可保存在浏览器ｃｏｏｋｉｅ中
——————————————————————————————
session.use_cookies 指定是否在客户端用 cookie 来存放会话 ID。默认为 1（启用），ｓｅｓｓｉｏｎ可保存在ｃｏｏｋｉｅ中。

session.gc_maxlifetime 指定过了多少秒之后数据就会被视为“垃圾”并被清除。

session.cookie_lifetime 以秒数指定了发送到浏览器的 cookie 的生命周期。值为 0 表示“直到关闭浏览器”。默认为 0。

int session_status() 被用于返回当前会话状态。分别为0、1、2，PHP_SESSION_DISABLED 会话是被禁用的。PHP_SESSION_NONE 会话是启用的，但不存在当前会话。 PHP_SESSION_ACTIVE 会话是启用的，而且存在当前会话。

session_regenerate_id() — 使用新生成的会话 ID 更新现有会话 ID.

session_encode — 将当前会话数据编码为一个字符串

session_destroy() 销毁当前会话中的全部数据， 但是不会重置当前会话所关联的全局变量， 也不会重置会话 cookie。
